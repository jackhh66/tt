# #######################################
# ##          DEFAULT SETTINGS        ###
# #######################################

[default]
# Dynaconf settings verification
VALUE = "Production - Default"
# Keyword to be use to identify an order
action_identifier = "BUY SELL LONG SHORT"
# Format of the notification. Format can be
# NotifyFormat.MARKDOWN
# or NotifyFormat.HTML
apprise_format = "NotifyFormat.MARKDOWN"
# Refer to
# https://github.com/caronc/apprise/wiki
# Apprise endpoint URL can be a URL
# for the chat, a URL to an Apprise config
# or a URL to the Apprise API endpoint
# apprise_url = "tgram://BOTTOKEN/CHANNEL"
# apprise_url = "discord://token1/channel"
apprise_url = "json://localhost"
# instrument monitored under trend
# use https://tvdb.brianthe.dev
# to update the list for your instrument
assets = [
  {id = "EURUSD", exchange = 'FX_IDC', screener = "forex"},
  {id = "BTCUSD", exchange = 'BINANCE', screener = "crypto"}
]
# Plugins name list to load at the start
# of the bot to allow a reduced memory
# usage and footprint if needed
# if you want all the plugins to be loaded
# at the start, set it to
# authorized_plugins = []
# Here the value has been set for helper
# and dex exchange plugins only
authorized_plugins = [
]
# command to toggle aimode
bot_command_aimode = "aimode"
# Command for user balance
bot_command_bal = "bal"
# command for reset conversation
bot_command_clearai = "clearai"
# command to export conversation
bot_command_exportai = "export"
# Command for help
bot_command_help = "help"
# Command for info
bot_command_info = "info"
# Command to retrieve network info
# such as latency ping and IP address of
# the bot
bot_command_network = "network"
# bot command for news feeds
bot_command_news = "news"
# Command for daily pnl
bot_command_pnl_daily = "d"
# Command for user position
bot_command_pos = "pos"
# command for conversation
bot_command_question = "ai"
# Command for instrument quote
bot_command_quote = "q"
# Command to restart the bot
bot_command_restart = "restart"
# Command for switch trading on or off
bot_command_trading = "trading"
# bot command for trading view trend
bot_command_trend = "trend"
# bot command for tv feed
bot_command_tv = "live"
# Specific data that should be ignore by
# the parser
bot_ignore = "‚ÑπÔ∏è ü¶Ñ ‚ö†Ô∏è üìä üè¶ üì∫ ‚¨ÜÔ∏è üí¨ qq"
# Bot Prefix
bot_prefix = "/"
# Help Message
ccxt_commands = """
üéØ BUY BTCUSDT
üéØ /q BTCUSDT
üè¶ /bal
üè¶ /pos
"""
# Module Enable/Disable
cex_enabled = true
# Keyword identifier for comments
comment_identifier = "comment="
# DEX ABI to use in case you have no explorer setup
dex_erc20_abi_url = "https://raw.githubusercontent.com/Uniswap/interface/44c355c7f0f8ab5bdb3e0790560e84e59f5666f7/src/abis/erc20.json"
# DEX factory address to use
dex_factory_contract_addr = "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f"
# DEX ABI to use in case you have no explorer setup
dex_router_abi_url = "https://raw.githubusercontent.com/uniswap-python/uniswap-python/master/uniswap/assets/uniswap-v2/router02.abi"
# help message used in talky app
dxsp_commands = """
üéØ BUY WBTC
üéØ /q WBTC
üè¶ /bal
üè¶ /pos
"""
# Enable/Disable DXSP
dxsp_enabled = true
# Events calendar
economic_calendar = "https://nfs.faireconomy.media/ff_calendar_thisweek.json"
# Events Enable/Disable
enable_events = true
# Feeds Enable/Disable
enable_feed = true
# Signals Enable/Disable
enable_signals = true
enable_yfinance = true
# Example plugin for test purpose
example_plugin_enabled = false
# Module Enable/Disable
findmyorder_enabled = true
# Adhoc date to add in event tracker
fomc_decision_date = ["2023-09-20", "2023-11-01", "2023-12-13"]
# Forwarded  Enable/Disable
forwarder = false
# Forwarder URL
forwarder_url = ""
# Header to use for retrieving urls content below
headers = {User-Agent = 'Mozilla/5.0'}
# Help Message
helper_commands = """
üîÄ /trading
üîÅ /restart
üï∏Ô∏è /network
"""
# Helper Enable/Disable
helper_enabled = true
# Uvicorn Server settings
host = "0.0.0.0"
# Module Enable/Disable
iamlistening_enabled = true
# Instrument to be ignored
# when generating an order
ignore_instrument = "US500 DOGE"
# Settings to enable or disable
# instrument mapping
instrument_mapping = true
# time lag to wait ai response
lag = 5
# Keyword identifier for leverage
leverage_type_identifier = "cross isolated"
# TV url
live_tv_url = "https://bloomberg.com/media-manifest/streams/us.m3u8"
# AI Mode continously listen to
# the conversation
llm_ai_mode = false
# help message listing the commands
# available
llm_commands = """
üí¨ /ai
‚û∞ /aimode
üßΩ /clearai
‚Äçüí® /export
"""
# LLM Model to use
llm_model = "gpt-3.5-turbo"
llm_prefix = "üêª"
# LLM Provider
# Refer to https://github.com/xtekky/gpt4free
# for the list of supported provider
llm_provider = "g4f.Provider.Bing"
# LLM Template to use as conversation starter
llm_template = """
You are a friendly AI helping me with
trade monitoring and execution
for Forex pairs and crypto trading.
The user will provide the task,
you will provide only the output
in the exact format specified below
with minimal explanation or conversation.

Example input:
Help me with a trading monitoring for EURUSD

Example output:
- Daily trend is bearish
- Weekly trend is bearish
- Monthly trend is bearish
- Quaterly and yearly trend is bearish
- historical trend for this month is bearish
- here are the key news

"""
# Log level
# set to "DEBUG" if you need
# to troubleshoot
loglevel = "INFO"
# instrument mapping to use and alternative
# symbol when generating the order
mapping = [
  {id = "EURUSD", alt = "EUR/sUSD"},
  {id = "GOLD", alt = "XAU"},
  {id = "SILVER", alt = "XAG"},
  {id = "BTC", alt = "WBTC"},
  {id = "ETH", alt = "WETH"}
]
# Number of conversation history
# between user and ai
max_memory = 100
# Module Enable/Disable
myllm_enabled = true
# Feeds RSS url
news_feed = "https://www.dailyfx.com/feeds/market-news"
# Keyword identifier for order type
order_type_identifier = "spot future margin"
# URL endpoint for the latency
# ping. Used for testping testing
ping = "8.8.8.8"
# Plugins Locations
plugin_directory = "tt.plugins.default_plugins"
# Plugins Enable/Disable
plugin_enabled = true
port = 8080
# Quantity default value is none is provided
quantity = 1
# Keyword identifier for quantity
quantity_identifier = 'q='
# version control
repo = "https://api.github.com/repos/mraniki/tt/releases/latest"
# Stoploss default value is none is provided
stop_loss = 1000
# Keyword identifier for stoploss
stop_loss_identifier = "sl="
# Take-Profit default value is none is provided
take_profit = 1000
# Keyword identifier for take-profit
take_profit_identifier = 'tp='
# help message listing the commands available
talkytrend_commands = "üì∫ /live\nüì∞ /news\nüìä /trend"
# Module Enable/Disable
talkytrend_enabled = true
# yahoo finance ticker reference
# to retrieve company news
# or index news
ticker_reference = "NVDA"
# token list using uniswap tokenlist format
# https://github.com/mraniki/tokenlist
# this can be used to avoid using coingecko
# or be used for niche token not listed anywhere
# or for testnet
token_mainnet_list = "https://raw.githubusercontent.com/mraniki/tokenlist/main/all.json"
token_personal_list = "https://raw.githubusercontent.com/mraniki/tokenlist/main/TT.json"
token_testnet_list = "https://raw.githubusercontent.com/mraniki/tokenlist/main/testnet.json"
# Trading Enable/Disable
trading_enabled = true
# If set to true, the server will
# provide a ui for the bot available at
# http://0.0.0.0:8080/
# refer to frontend documentation for
# more details
ui_enabled = false
# User Plugin Enable/Disable
# Not yet implemented
user_plugins_allowed = false
version_check = true
webhook_secret = "123abc"

# CCXT Parameters to connect
# to 1 or more exchanges
[default.cex.template]
api_key = ""
defaulttype = ""
leverage = 1
leverage_type = ""
mapping = [
  {id = "BTC", alt = "BTC/USDT"}
]
name = ""
ordertype = ""
password = ""
protocol = ""
secret = ""
testmode = true
trading_asset = "USDT"
trading_asset_separator = ""
trading_risk_amount = 10
trading_risk_percentage = true
trading_slippage = 2

# dex settings for 1 exchange based on chain 1 mainnet
# and uniswap v2 protocol type and router uniswap
[default.dex.template]
api_endpoint = ''
api_key = ""
block_explorer_api = ""
block_explorer_url = ""
factory_contract_addr = ""
mapping = [
  {id = "BTC", alt = "WBTC"}
]
private_key = ""
protocol_type = "uniswap"
protocol_version = 2
router_contract_addr = ""
rpc = ""
trading_asset_address = ""
trading_risk_amount = 10
trading_risk_percentage = true
trading_slippage = 2
wallet_address = ""

[default.platform.template]
bot_api_hash = ""
bot_api_id = ""
bot_auth_token = ""
bot_channel_id = ""
bot_hostname = ""
bot_pass = ""
bot_token = ""
bot_user = ""
iteration_enabled = false
iteration_limit = -1
platform = ""

# second cex example
# protocol = "ccxt"
# name = "binane"
# api_key= ""
# secret= ""
# password = ""
# testmode = true
# defaulttype = "spot"
# ordertype = "market"
# leverage_type = "isolated"
# leverage = 1
# trading_risk_percentage = true
# trading_risk_amount = 10
# trading_asset = "USDT"
# trading_asset_separator = ""
# mapping = [
# { id = "BTC", alt = "BTC/USDT" },
# ]
# #######################################
# ##     END OF DEFAULT SETTINGS      ###
# #######################################
